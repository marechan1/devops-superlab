#!/usr/bin/env fish
set -l REPO_DIR ~/devops-superlab
set -l REPO_NAME devops-superlab
set -l DESC "All-in-one DevOps & Multi-Cloud SuperLab (scripts, toggles, status, labs)"

function header; echo -e "\n==> $argv"; end
function abort; echo (set_color red)"[ERR]"(set_color normal) " " $argv; exit 1; end

header "Checking gh auth"
gh auth status >/dev/null 2>&1; or begin
  echo "GitHub CLI not authenticated. Launching 'gh auth login'..."
  gh auth login || abort "GitHub auth required."
end

header "Preparing repo at $REPO_DIR"
mkdir -p $REPO_DIR
cd $REPO_DIR

# seed README if missing
if not test -f README.md
  cat > README.md <<'MD'
# DevOps SuperLab

One-command bootstrap for a practical DevOps / Cloud / SRE home lab:
- Toggle **systemd DB services** vs **containerized DB labs**: `db-services-on` / `db-labs-on`
- Status rollup: `fish ~/devops-superlab/scripts/self-test.fish` (calls your `~/devops-status.fish`)
- Includes helpers and wrappers created during setup.

> Generated by `devops-superlab-bootstrap.sh`.
MD
end

# include scripts folder
mkdir -p scripts
# bring in scripts we wrote
for f in ~/devops-superlab/scripts/self-test.fish ~/devops-superlab/scripts/git-publish.fish
  test -f $f; and true; or abort "Expected script missing: $f"
end

# init or update git
if not test -d .git
  git init
  git branch -m main
end

git add -A
git commit -m "SuperLab: scripts, DB toggles, docs" 2>/dev/null; or echo "[git] nothing to commit"

# create or push repo
if gh repo view $REPO_NAME >/dev/null 2>&1
  header "Remote exists; pushing"
  git remote get-url origin >/dev/null 2>&1; or gh repo set-default $REPO_NAME
  git push -u origin main
else
  header "Creating GitHub repo $REPO_NAME"
  gh repo create $REPO_NAME --public --source=. --push --description "$DESC"
end

echo -e "\n\033[1;32mDone.\033[0m View on GitHub:"
gh repo view $REPO_NAME --web
